"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ewfh^hbbg1mee(dg8rqo2mcrqc6%1qj_m%psp@uqz5xw7y5%w='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # надо указать не имя нашего приложения, а его конфиг, чтобы всё заработало
    'news.apps.NewsConfig',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
]

DEFAULT_FROM_EMAIL = 'pensir04@mail.ru'  # здесь указываем уже свою ПОЛНУЮ почту с которой будут отправляться письма

ADMINS = [
    ('Jane', 'pensir04@gmail.com'),
]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/posts/'

SITE_ID = 1

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

LOGGING = {
    # номер версии стандарта, в котором записываются настройки подсистемы журналирования, в виде целого числа.
    'version': 1,
    # Если True, то регистраторы, используемые по умолчанию, работать не будут, если False — будут (по умолчанию — True).
    'disable_existing_loggers': False,
    # фильтр для вывода сообщений, удовлетворяющие определенным условиям
    'filters': {
        # фильтр, пропускающий сообщения только в эксплуатационном режиме
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        # этот фильтр будет пропускать сообщения только в отладочном режиме.
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # Форматировщик определяет формат сообщений о произошедших событиях,
    'formatters': {
        # выводит сообщения в формате <время создания> <уровень> <текст>
        'debug': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        # выводит сообщения в формате <время создания> <уровень> <текст> <путь к источнику события>
        'warning': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'style': '{',
        },
        # выводит сообщения в формате <время создания> <уровень> <текст> <путь к источнику события> <стэк ошибки>
        'error_critical': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
            'style': '{',
        },
        # выводит сообщения в формате <время создания> <уровень> <модуль-источник сообщения> <текст>
        'general': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
    },
    # Обработчик выполняет вывод определенным способом (на консоль, в файл, по электронной почте и др.) сообщений,
    # прошедших через фильтры, в формате, заданном форматировщиком.
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler', # выводит сообщение в консоль
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'formatter': 'debug'
        },
        'console_path': {
            'class': 'logging.StreamHandler',
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'formatter': 'warning'
        },
        'console_path_exc': {
            'class': 'logging.StreamHandler',
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'formatter': 'error_critical',
        },
        'file_general': {
            'class': 'logging.FileHandler', # сохраняет сообщения в файле с заданным путем.
            'filename': './logs/general.log',
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'formatter': 'general',
        },
        'file_error': {
            'class': 'logging.FileHandler',
            'filename': './logs/error.log',
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'formatter': 'error_critical',
        },
        'file_security': {
            'class': 'logging.FileHandler',
            'filename': './logs/security.log',
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'formatter': 'general',
        },
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler', # отправляет сообщения по электронной почте по адресам,
            # приведенным в списке параметра ADMINS настроек проекта
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'formatter': 'warning',
        }
    },

    # Регистратор собирает все сообщения, отправленные заданными подсистемами Django, и передает их указанным обработчикам для вывода.
    'loggers': {
        'django': {
            'handlers': ['console', 'console_path', 'console_path_exc', 'file_general'],
            'level': 'DEBUG',
        },
        'django.request': {
            'handlers': ['file_error'],
            'level': 'INFO',
        },
        'django.template': {
            'handlers': ['file_error'],
            'level': 'ERROR',
        },
        'django.db_backends': {
            'handlers': ['file_error'],
            'level': 'ERROR',
        },
        'django.server': {
            'handlers': ['file_error'],
            'level': 'ERROR',
        },
        'django.security': {
            'handlers': ['file_security'],
            'level': 'ERROR',
        },
    },
}

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# для регистрации по электронной почте.
ACCOUNT_EMAIL_REQUIRED = True # поле email является обязательным
ACCOUNT_UNIQUE_EMAIL = True # поле email является уникальным
ACCOUNT_USERNAME_REQUIRED = False # поле username теперь необязательный
ACCOUNT_AUTHENTICATION_METHOD = 'email' # аутентификация будет происходить посредством электронной почты
ACCOUNT_EMAIL_VERIFICATION = 'none' # верификация почты отсутствует

# Чтобы allauth распознал нашу форму как ту, что должна выполняться вместо формы по умолчанию, необходимо добавить строчку в файл настроек проекта settings.py
ACCOUNT_FORMS = {'signup': 'news.forms.BasicSignupForm'}



WSGI_APPLICATION = 'NewsPaper.wsgi.application'

def FILTERS_VERBOSE_LOOKUPS():
    from django_filters.conf import DEFAULTS

    verbose_lookups = DEFAULTS['VERBOSE_LOOKUPS'].copy()
    verbose_lookups.update({
        'gt': 'позже, чем',
        'contains': 'содержит',
        'icontains': 'содержит',
    })
    return verbose_lookups


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_HOST = 'smtp.mail.ru' # адрес исходящего сервера mail-почты для всех один и тот же
EMAIL_PORT = 465 # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'pensir04' # ваше имя пользователя, например если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = 'GW5QJkbgiX9vzbmx0jeK' # пароль от почты
EMAIL_USE_SSL = True

# Format string for displaying run time timestamps in the Django admin site. The default
# just adds seconds to the standard Django format, which is useful for displaying the timestamps
# for jobs that are scheduled to run on intervals of less than one minute.
#
# See https://docs.djangoproject.com/en/dev/ref/settings/#datetime-format for format string
# syntax details.
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# Maximum run time allowed for jobs that are triggered manually via the Django admin site, which
# prevents admin site HTTP requests from timing out.
#
# Longer running jobs should probably be handed over to a background task processing library
# that supports multiple background worker processes instead (e.g. Dramatiq, Celery, Django-RQ,
# etc. See: https://djangopackages.org/grids/g/workers-queues-tasks/ for popular options).
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}